{"version":3,"sources":["styles.js","components/CardHolder/styles.js","components/TaskPage/styles.js","components/Column/styles.js","components/Card/styles.js","components/Card/index.jsx","components/Column/index.jsx","components/CardModal/styles.js","components/NewCard/styles.js","components/CardModal/index.jsx","components/CardHolder/index.jsx","components/NewCard/index.jsx","components/UpdateColumn/styles.js","components/UpdateColumn/index.jsx","public/img/TMlogo.png","components/TaskPage/index.jsx","components/Login/styles.js","components/Login/index.jsx","App.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","Holder","styled","div","HolderHead","H3","h3","Cards","CardDisplay","$cardActive","H4","h4","Header","header","Img","img","Nav","nav","P","Main","main","NewCardDisplay","$modal","Column","section","Card","TaskCard","data","cardClick","id","_id","onClick","title","dateTime","user","Columns","dbData","colNum","map","seed","parseInt","column","CardModal","aside","H5","h5","H6","h6","ButtonHolder","Button","button","p","NewCardHolder","Form","form","Input","input","Textarea","textarea","Select","select","CardModalDisplay","closeViewEdit","currentData","columns","setEditCard","editCard","editData","handleDelete","cardActive","useState","editedForm","setEditedForm","valid","setValid","formUpdate","e","preventDefault","target","name","value","handleClose","validate","placeholder","formValid","key","htmlFor","type","onBlur","onChange","defaultValue","description","required","disabled","CardHolder","setCurrentData","event","sendData","targId","filter","length","NewCard","addNewForm","updateForm","makeNewCard","colSelect","useRef","validObj","setValidObj","ref","UpdateHolder","ColumnList","ColDiv","UpdateColumn","updateColumn","addNewColumn","addColumnUpdate","editColumn","handleColDelete","colEdit","setColEdit","addCol","setAddCol","editedCol","setEditedCol","colInEdit","setColInEdit","saveColumnUpdate","a","fetch","method","headers","body","JSON","stringify","console","log","handleClick","innerText","col","columnUpdate","TaskPage","setUserAuth","newCard","setNewCard","updateCol","setUpdateCol","modal","setModal","setDbData","colData","setColData","colForm","setColForm","setCardActive","formData","setFormData","fetchData","response","json","cards","fetchColumns","useEffect","current","handleLogOut","tempArray","temp","indexOf","alt","src","logo","FormHolder","$newUser","Login","username","password","login","setLogin","logError","setLogInfo","newUser","setNewUser","sentFrom","passwordFirst","passwordSecond","newUserForm","setNewUserForm","loginForm","submitLogin","userAuth","confirm","logged","createNewUserForm","submitNewUser","addNew","userInSystem","test","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5613436e.chunk.js","sourcesContent":["import styled, {createGlobalStyle} from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    @font-face {\n        font-family: Hauora;\n        src: local(/src/fonts/Hauora-Bold);\n        font-weight: 800;\n    }\n\n    @font-face {\n        font-family: Hauora;\n        src: local(/src/fonts/Hauora-Medium);\n        font-weight: 600;\n    }\n\n    @font-face {\n        font-family: Hauora;\n        src: local(/src/fonts/Hauora-Regular);\n        font-weight: 400;\n    }\n\n    *,\n    *::after,\n    *::before {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: 'Hauora', sans-serif;\n        color: #2C436D;\n        font-weight: 400;\n        font-size: 1rem;\n    }\n`","import styled from 'styled-components'\n\nexport const Holder = styled.div`\n    width: 100%;\n    height: 100%;\n    border: 3px solid #2C436D;\n    border-radius: 15px 15px 0 0;\n    margin: 5vh 5vw;\n    display: flex;\n    justify-content: space-around;\n    flex-direction: column;\n    overflow-x: scroll;\n`\n\nexport const HolderHead = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: auto;\n    border-radius: 12px 12px 0 0;\n    background-color: #DAEDDE;\n`\n\nexport const H3 = styled.h3`\n    min-width: 23%;\n    width: 25%;\n    text-align: center;\n    background-color: #DAEDDE;\n    height: 100%;\n    padding: 1vh 0;\n    white-space: nowrap; \n\n    @media (max-width: 600px) {\n        font-size: 1rem;\n    }\n\n    @media (max-width: 400px) {\n        font-size: 0.75rem;\n    }\n`\n\nexport const Cards = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    padding: 2vh 0;\n`  \n\nexport const CardDisplay = styled.div`\n    display: ${({$cardActive}) => ($cardActive ? 'flex' : 'none')};\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(44,67,109,0.7);\n    overflow-y: hidden;\n`\n\nexport const H4 = styled.h4`\n    margin: 0 auto;\n    text-align: center;\n`\n","import styled from 'styled-components'\nimport { CardDisplay } from '../CardHolder/styles'\n\nexport const Header = styled.header`\n    height: 10vh;\n    background-color: #FDDEA4;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 2vw;\n    left: 0;\n    right: 0;\n\n    @media (max-width: 700px) {\n        flex-direction: column;\n        height: auto;\n        padding: 2vh 2vw;\n    }\n`\n\nexport const Img = styled.img`\n    width: 15vw;\n\n    @media (max-width: 700px) {\n        width: 20vw;\n    }\n`\n\nexport const Nav = styled.nav`\n    width: 40vw;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n\n    @media (max-width: 700px) {\n        width: 40vw;\n        width: 75vw;\n        font-size: 1rem;\n    }\n\n    @media (max-width: 500px) {\n        font-size: 0.75rem;\n    }\n`   \n\nexport const P = styled.nav`\n    padding: 1vh 1vw;\n    border-radius: 20px;\n    transition: background-color 0.5s;\n\n    &:hover {\n        background-color: #EBD3A7;\n        cursor: pointer;\n    }\n`\n\nexport const Main = styled.main`\n    width: 90vw;\n`\n\nexport const NewCardDisplay = styled(CardDisplay)`\n    display: ${({$modal}) => ($modal ? 'flex' : 'none')};\n`","import styled from \"styled-components\"\n\nexport const Column = styled.section`\n    min-width: 23%;\n    /* Below for v2 */\n    /* min-width: 15vw; */\n    height: auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`","import styled from \"styled-components\";\n\nexport const Card = styled.section`\n    padding: 2vh 5px;\n    flex-direction: column;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 15vh;\n    width: 20vw;\n    text-align: center;\n    border: 3px solid #2C436D;\n    background-color: #F8CCC5;\n    border-radius: 25px;\n    margin-bottom: 5%;\n\n    @media (max-width: 1020px) {\n        height: auto;\n    }\n`\n\nexport const H4 = styled.h4`\n    max-width: 100%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &:hover {\n        text-decoration: underline;\n        cursor: pointer;\n    }\n\n    @media (max-width: 600px) {\n        font-size: 0.75rem;\n    }\n`","import { Card, H4 } from './styles'\nimport './css.css'\n\nconst TaskCard = ({data, cardClick}) => {\n    return (\n        <Card>\n            <H4 id={data._id} onClick={cardClick}>{data.title}</H4>\n            <h5>Date created: {data.dateTime}</h5>\n            <p>User: {data.user}</p>\n        </Card>\n    )\n}\n\nexport default TaskCard","import { Column } from './styles'\nimport TaskCard from '../Card/index'\n\nconst Columns = ({dbData, colNum, cardClick}) => {\n    return (\n        <Column>\n            {dbData.map((seed) => (\n                parseInt(seed.column) === colNum ?\n                <TaskCard key={seed._id} data={seed} cardClick={cardClick} /> : null\n                ))}\n        </Column>\n    )\n}\n\nexport default Columns","import styled from 'styled-components'\n\nexport const CardModal = styled.aside`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    background-color: #F8CCC5;\n    border: 3px solid #2C436D;\n    border-radius: 30px;\n    text-align: center;\n    width: 60vw;\n    min-height: 60vh;\n    height: auto;\n    padding: 3vh 2vw;\n\n    @media (max-width: 600px) {\n        width: 90%;\n    }\n`   \n\nexport const H4 = styled.h4`\n    align-self: stretch;\n    font-size: 2.5rem;\n\n    &::after {\n        content: \"\";\n        background-color: #2C436D;\n        display: block;\n        position: relative;\n        height: 3px;\n    }\n\n    @media (max-width: 600px) {\n        font-size: 1.5rem;\n    }\n`\n\nexport const H5 = styled.h5`\n    font-size: 2rem;\n\n    @media (max-width: 1020px) {\n        display: ${({$cardActive}) => ($cardActive ? 'inline' : 'none')}\n    }\n\n    @media (max-width: 600px) {\n        font-size: 1.5rem;\n    }\n`\n\nexport const H6 = styled.h6`\n    font-size: 1.5rem;\n\n    @media (max-width: 600px) {\n        font-size: 1rem;\n    }\n`\n\nexport const ButtonHolder = styled.div`\n    display: flex;\n    width: 100%;\n    align-items: center;\n    justify-content: space-between;\n`\n\nexport const Button = styled.button`\n    position: relative;\n    pointer-events: all;\n    font-family: Hauora;\n    color: #2C436D;\n    width: 30%;\n    background-color: #DAEDDE;\n    border: none;\n    height: 5vh;\n    border-radius: 25px;\n    margin: 0 auto;\n    transition: background-color 0.5s;\n\n    &:hover {\n        background-color: #C5C9C6;\n        cursor: pointer;\n    }\n\n    @media (max-width: 700px){\n        font-size: 0.5rem;\n    }\n`\n\nexport const P = styled.p`\n    @media (max-width: 1020px){\n        display: ${({$cardActive}) => ($cardActive ? 'inline' : 'none')}\n    }\n`","import styled from \"styled-components\";\n\nexport const NewCardHolder = styled.section`\n    background-color: #F8CCC5;\n    border: 3px solid #2C436D;\n    border-radius: 30px;\n    text-align: center;\n    width: 60%;\n    height: 75%;\n    display: flex;\n    align-items: center;\n\n    @media (max-height: 700px) {\n        height: 90vh;\n    }\n\n    @media (max-width: 600px) {\n        width: 90%;\n    }\n\n`\n\nexport const Form = styled.form`\n    margin: 0 auto;\n    align-items: center;\n    justify-content: space-between;\n    height: 90%;\n    display: flex;\n    flex-direction: column;\n    width: 90%;\n`\n\nexport const Input = styled.input`\n    border: 5px solid #FDDEA4;\n    border-radius: 20px;\n    width: 80%;\n    padding: 1vh 1vw;\n    font-family: Hauora;\n    margin: 1vh 0;\n`   \n\nexport const Textarea = styled.textarea`\n    border: 5px solid #FDDEA4;\n    border-radius: 20px 0 0 20px;\n    width: 90%;\n    padding: 1vh 1vw;\n    min-height: 100px;\n    height: 4vh;\n    resize: none;\n    font-family: Hauora;\n    margin: 1vh 0;\n`\n\nexport const Select = styled.select`\n    width: 50%;\n    padding: 1vh 1vw;\n    border: 5px solid #FDDEA4;\n    border-radius: 20px;\n    font-family: Hauora;\n    margin: 1vh 0;\n`","import { useState } from 'react'\nimport { CardModal, H4, H5, H6, P, Button, ButtonHolder} from './styles'\nimport { Form, Input, Textarea, Select } from '../NewCard/styles'\n\nconst CardModalDisplay = ({closeViewEdit, currentData, columns, setEditCard, editCard, editData, handleDelete, cardActive}) => {\n    // editedForm is the current form data prior to being edited\n    const [editedForm, setEditedForm] = useState(currentData[0])\n    // valid handles form validation\n    const [valid, setValid] = useState(true)\n\n    // The below handles the updating of the form\n    const formUpdate = (e) => {\n        e.preventDefault()\n        const {name, value} = e.target\n        setEditedForm(editedForm => ({\n            ...editedForm,\n            [name]: value\n        }))\n    }\n\n    /* The below handles closing the card - A check is undertaken to check if the card\n    is in the process of being edited */\n    const handleClose = () => {\n        if(editCard){\n            setEditCard(false)\n            closeViewEdit()\n        } else {\n            closeViewEdit()\n        }\n    }\n\n    // The below passes the edited form data to the editData function in the TaskPage component\n    const handleSubmit = () => {\n        setEditCard(false)\n        editData(editedForm)\n    }\n\n    // Form validation\n    const validate = (e) => {\n        if(e.target.value === ''){\n            e.target.placeholder = \"Field must be completed\"\n            setValid(false)\n        }\n        formValid()\n    }\n\n    const formValid = () => {\n        for(let key in editedForm){\n            if(editedForm[key] === ''){\n                return\n            }\n        }\n        setValid(true)\n    }\n \n    return ( \n        <CardModal>\n            {!editCard ?\n                <>\n                    <H4>{currentData[0].title}</H4>\n                    <H5 $cardActive={cardActive}>Date created: {currentData[0].dateTime}</H5>\n                    <H6>User: {currentData[0].user}</H6>\n                    <P $cardActive={cardActive}>{currentData[0].description}</P>\n                    <ButtonHolder>\n                        <Button type=\"button\" onClick={setEditCard}>Edit</Button>\n                        <Button type=\"button\" onClick={handleClose}>Close</Button>\n                    </ButtonHolder> \n                </> : \n                <Form>\n                    <label htmlFor=\"title\">Title:</label>\n                        <Input type=\"text\" name=\"title\" id=\"title\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].title} />\n                    <label htmlFor=\"dateTime\">Date:</label>\n                        <Input type=\"text\" name=\"dateTime\" id=\"dateTime\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].dateTime} />\n                    <label htmlFor=\"user\">User:</label>\n                        <Input type=\"text\" name=\"user\" id=\"user\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].user} />\n                    <label htmlFor=\"description\">Description:</label>\n                        <Textarea id=\"description\" name=\"description\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].description}></Textarea>\n                    <label htmlFor=\"column-select\">Column:</label>\n                        {/* BUG: Display doesn't update when column is changed but the card is moved correctly */}\n                        <Select value={currentData[0].column} onChange={formUpdate} name=\"column\" id=\"column-select\" required>\n                                <option value=\"\" disabled>Select column</option>\n                            {columns.map((column) => (\n                                <option key={column.id} value={column.id}>{column.name}</option>\n                            ))}\n                        </Select>\n                    <ButtonHolder>\n                        <Button onClick={handleSubmit} type=\"button\" disabled={valid ? false : true}>{valid ? 'Submit' : 'Enter information'}</Button>\n                        <Button onClick={e => handleDelete(currentData[0]._id)} type=\"button\">Delete</Button>\n                        <Button onClick={handleClose} type=\"button\">Close</Button>\n                    </ButtonHolder>\n                </Form>\n            }\n        </CardModal>\n    )\n}\n\nexport default CardModalDisplay","import { useState } from 'react'\nimport { Holder, HolderHead, Cards, H3, CardDisplay, H4 } from './styles'\nimport Column from '../Column/index'\nimport CardModalDisplay from '../CardModal'\n\nconst CardHolder = ({columns, dbData, editData, closeViewEdit, cardActive, handleDelete}) => {\n    // currentData is the currently displayed data in the CardModalDisplay component\n    const [currentData, setCurrentData] = useState([])\n    // editCard is a conditional to check if the card is being edited\n    const [editCard, setEditCard] = useState(false)\n    \n    // Function to handle passing currently clicked card to modal\n    const cardClick = (event) => {\n        event.target.id && sendData(event.target.id)\n        closeViewEdit()\n    }\n\n    // The below takes an ID as an argument and returns the data to display in the CardModalDisplay component\n    const sendData = (targId) => {\n        setCurrentData(currentData => (\n            currentData = dbData.filter(data => data._id === targId)\n        ))\n    }\n\n    return(\n        <Holder>\n            <CardDisplay $cardActive={cardActive} >\n                {cardActive && <CardModalDisplay \n                                    closeViewEdit={closeViewEdit} \n                                    currentData={currentData} \n                                    columns={columns} \n                                    setEditCard={setEditCard} \n                                    editCard={editCard} \n                                    editData={editData} \n                                    handleDelete={handleDelete}\n                                    cardActive={cardActive} /> }\n            </CardDisplay>\n            <HolderHead>\n                {columns.map((column) => (\n                        <H3 key={column.id}>{column.name}</H3>\n                    ))}\n            </HolderHead>\n            <Cards>\n                {columns.length === 0 ?\n                    <H4>To get started, add a new column with 'Edit Columns' above</H4> : \n                    columns.map((column) => (\n                        <Column key={column.id} colNum={column.id} dbData={dbData} cardClick={cardClick} />\n                    ))}\n            </Cards>\n        </Holder>\n    )\n}\n\nexport default CardHolder","import { useState, useRef } from 'react'\nimport { NewCardHolder, Form, Input, Textarea, Select } from './styles'\nimport { Button, ButtonHolder } from '../CardModal/styles'\n\nconst NewCard = ({columns, addNewForm, updateForm, makeNewCard}) => {\n    const colSelect = useRef()\n    const [valid, setValid] = useState(false)\n    const [validObj, setValidObj] = useState({\n        title: '',\n        dateTime: '',\n        user: '',\n    })\n\n    const validate = (e) => {\n        const {name, value} = e.target\n        if(e.target.value === ''){\n            e.target.placeholder = \"Field must be completed\"\n        } else {\n            setValidObj(() => ({\n                ...validObj,\n                [name]: value\n            }))\n        }\n        formValid()\n    }\n\n    const formValid = () => {\n        for(let key in validObj){\n            if(validObj[key] === ''){\n                return\n            }\n        }\n        setValid(true)\n    }\n    \n    return (\n        <NewCardHolder>\n            <Form>\n                <label htmlFor=\"title\">Title:</label>\n                    <Input onChange={updateForm} onBlur={validate} type=\"text\" name=\"title\" id=\"title\" />\n                {/* TODO: VERSION 3 add date validations \n                <label htmlFor=\"date\">Start Date\n                    <Input type=\"date\" name=\"date\" id=\"date\" />\n                </label>\n                <label htmlFor=\"date\">Finish Date\n                    <Input type=\"date\" name=\"date\" id=\"date\"  />\n                </label> */}\n                <label htmlFor=\"dateTime\">Date:</label>\n                    <Input onChange={updateForm} onBlur={validate} type=\"text\" name=\"dateTime\" id=\"dateTime\" />\n                <label htmlFor=\"user\">User:</label>\n                    <Input onChange={updateForm} onBlur={validate} type=\"text\" name=\"user\" id=\"user\" />\n                <label htmlFor=\"description\">Description:</label>\n                    <Textarea onChange={updateForm} onBlur={validate} id=\"description\" name=\"description\"></Textarea>\n                <label htmlFor=\"column-select\">Column:</label>\n                    <Select ref={colSelect} name=\"column\" id=\"column-select\">\n                            <option disabled>Select column</option>\n                        {columns.map((column) => (\n                            <option key={column.id} value={column.id}>{column.name}</option>\n                        ))}\n                    </Select>\n                <ButtonHolder>\n                    <Button onClick={(e) => addNewForm(e, colSelect)} type=\"button\" disabled={valid ? false : true}>{valid ? 'Submit' : 'Enter information'}</Button>\n                    <Button type=\"button\" onClick={makeNewCard}>Close</Button>\n                </ButtonHolder>\n            </Form>\n        </NewCardHolder>\n    )\n}\n\nexport default NewCard","import styled from \"styled-components\"\n\nexport const UpdateHolder = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    height: 75%;\n    width: 75%;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const P = styled.p`\n    font-size: 1.25rem;\n    display: inline;\n`  \n\nexport const ColumnList = styled.div`\n    height: 50%;\n    overflow-y: scroll;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 75%;\n    border: 3px solid #2C436D;\n    border-radius: 20px 0 0 20px;\n    padding: 1vh 1vw;\n    align-items: center;\n    background: white;\n`\n\nexport const ColDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n`","import React, { useState } from 'react'\nimport { NewCardHolder, Input } from '../NewCard/styles'\nimport { Button, ButtonHolder } from '../CardModal/styles'\nimport { UpdateHolder, P, ColumnList, ColDiv } from './styles'\n\nconst UpdateColumn = ({columns, updateColumn, addNewColumn, addColumnUpdate, editColumn, handleColDelete}) => {\n    // Editing column names state\n    const [colEdit, setColEdit] = useState(false)\n    // Adding a new column state\n    const [addCol, setAddCol] = useState(false)\n    // Currently edited column\n    const [editedCol, setEditedCol] = useState(null)\n    // ID of currently edited column\n    const [colInEdit, setColInEdit] = useState(null)\n    \n    // Server start\n    const saveColumnUpdate = async () => {\n        try {\n            await fetch(`/apicol/${colInEdit}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(editedCol)\n            })\n        } catch (e) {\n            console.log(e)\n        }\n    }\n    // Server end\n\n    // The below handles updating the column name\n    const columnUpdate = (e, col) => {\n        e.preventDefault()\n        setColInEdit(col)\n        const {name, value} = e.target\n        setEditedCol(editedCol => ({\n            id: col,\n            [name]: value,\n        }))\n    }\n\n    // The below handles the click function depending on the button\n    const handleClick = (e) => {\n        if(e.target.innerText === \"Add Column\"){\n            setAddCol(!addCol)\n        }\n        \n        if(e.target.innerText === \"Edit\"){\n            if(addCol){\n                setAddCol(!addCol)\n            }\n            setColEdit(!colEdit)\n        }\n        \n        if(e.target.innerText === \"Close\"){\n            editColumn()\n        }\n    }\n\n    const handleEdit = () => {\n        if(editedCol !== null){\n            console.log(\"Save clicked\")\n            saveColumnUpdate()\n            addColumnUpdate(editedCol)\n            editColumn()\n        }\n    }\n\n    return (\n        <NewCardHolder>\n            <UpdateHolder>\n                <h3>Columns</h3>\n                <ColumnList>\n                    {addCol && <Input type=\"text\" onChange={updateColumn} name=\"name\" placeholder=\"Enter new column name\" />}\n                    {columns.map((col) => (\n                        colEdit ? \n                            <ColDiv key={col.id}>\n                                <Input type=\"text\" onChange={e => columnUpdate(e, col.id)} defaultValue={col.name} name=\"name\" disabled={colInEdit !== null && colInEdit !== col.id ? true : false}/>\n                                <Button onClick={e => handleColDelete(col.id)}>Delete</Button>\n                            </ColDiv> :\n                            <P key={col.id}>{col.name}</P>\n                        ))}\n                </ColumnList>\n                <ButtonHolder>\n                    {colEdit ? \n                        <Button onClick={handleEdit}>Save</Button> :\n                        <>\n                            <Button onClick={handleClick}>Edit</Button>\n                            {!addCol ? \n                                <Button type=\"submit\" onClick={handleClick}>Add Column</Button> : \n                                <Button type=\"submit\" onClick={addNewColumn}>Save Column</Button>}\n                        </>\n                    }\n                    <Button onClick={handleClick}>Close</Button>\n                </ButtonHolder>\n            </UpdateHolder>\n        </NewCardHolder>\n    )\n}\n\nexport default UpdateColumn","export default __webpack_public_path__ + \"static/media/TMlogo.403cf7c1.png\";","import { useState, useEffect } from 'react'\nimport { Header, Img, Nav, Main, NewCardDisplay, P } from './styles'\nimport CardHolder from '../CardHolder/index.jsx'\nimport NewCard from '../NewCard/index'\nimport UpdateColumn from '../UpdateColumn'\nimport logo from '../../public/img/TMlogo.png'\n\nconst TaskPage = ({setUserAuth}) => {\n    // State for new card in progress\n    const [newCard, setNewCard] = useState(false)\n    // State for column update in progress\n    const [updateCol, setUpdateCol] = useState(false)\n    // State for bg modal\n    const [modal, setModal] = useState(false)\n    // Seed data passed into state\n    const [dbData, setDbData] = useState([]) \n    // Column data passed into state\n    const [colData, setColData] = useState([])\n    // State for handling adding a new column\n    const [colForm, setColForm] = useState({\n        id: '',\n        name: '',\n    })\n    // State for handling viewing of a card\n    const [cardActive, setCardActive] = useState(false)\n    // State for handling adding a new card\n    const [formData, setFormData] = useState({\n        title: '', \n        dateTime: '',\n        user: '',\n        description: '',\n        column: 1\n    }) \n \n    // Function to handle the new card data\n    const updateForm = (e) => {\n        const {name, value} = e.target\n        setFormData(formData => ({\n            ...formData,\n            [name]: value,\n        }))\n    }\n\n    // Function to handle the new column data\n    const updateColumn = (e) => {\n        const {name, value} = e.target\n        setColForm(colForm => ({\n            ...colForm,\n            [name]: value\n        }))\n    }\n\n    // SERVER START\n    const fetchData = async () => {\n        try {\n            const response = await fetch('/api')\n            const cards = await response.json()\n            setDbData(cards)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const fetchColumns = async () => {\n        try {\n            const response = await fetch('/apicol')\n            const columns = await response.json()\n            setColData(columns)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n        fetchData()\n        fetchColumns()\n    }, [])\n\n    // Function to handle adding the new card to the db\n    const addNewForm = async (e, col) => {\n        e.preventDefault()\n        setFormData(formData => formData.column = parseInt(col.current.value))\n        try {\n            await fetch('/api', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(formData)\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        fetchData()\n        makeNewCard()\n    }\n\n    // Function to handle deleting a card\n    const handleDelete = async (id) => {\n        try {\n            await fetch(`/api/${id}`, {\n                method: 'DELETE',\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        fetchData()\n        closeViewEdit()\n    }\n\n    // Function to handle editing a card\n    const editData = async (data) => {\n        try {\n            await fetch(`/api/${data._id}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        fetchData()\n        closeViewEdit()\n    }\n\n    // Function to handle adding the new column to the column data\n    const addNewColumn = async (e) => {\n        e.preventDefault()\n        try {\n            await fetch('/apicol', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(colForm)\n            })\n        } catch (err) {\n            console.log(err)\n        }\n        editColumn()\n        fetchData()\n        fetchColumns()\n    }\n\n    // Function to handle deleting a column\n    const handleColDelete = async (id) => {\n        try {\n            await fetch(`/apicol/${id}`, {\n                method: 'DELETE',\n            })\n        } catch (err) {\n            console.log(err)\n        }\n        editColumn()\n        fetchColumns()\n    }\n\n    const handleLogOut = async () => {\n        try {\n            await fetch('/apilog', {\n                method: 'DELETE',\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        setUserAuth(false)\n      }\n\n    // SERVER END\n\n    // Function to change the view if a card is not being added\n    const makeNewCard = () => {\n        setModal(!modal)\n        setNewCard(!newCard)\n    }\n\n    // Function to handle new column click\n    const editColumn = () => {\n        setModal(!modal)\n        setUpdateCol(!updateCol)\n    }\n\n    // Function to handle editing a column and replacing in the array\n    const addColumnUpdate = (data) => {\n        const tempArray = [...colData]\n        for(let temp of tempArray){\n            if(temp.id === data.id){\n                tempArray[tempArray.indexOf(temp)] = data\n            }\n        }\n        setColData(colData => (\n            colData = tempArray\n        ))\n    }\n\n    // If 'cancel' is selected, change the view. TODO: Just use one main function to handle all modal views?\n    const closeViewEdit = () => {\n        setCardActive(!cardActive)\n    }\n\n    return (\n        <>\n            <Header>\n                <NewCardDisplay $modal={modal}>\n                    {newCard && \n                        <NewCard \n                            columns={colData} \n                            addNewForm={addNewForm} \n                            updateForm={updateForm} \n                            makeNewCard={makeNewCard} />}\n                    {updateCol && \n                        <UpdateColumn \n                            updateColumn={updateColumn} \n                            addNewColumn={addNewColumn} \n                            columns={colData} \n                            addColumnUpdate={addColumnUpdate} \n                            editColumn={editColumn} \n                            handleColDelete={handleColDelete} />}\n                </NewCardDisplay>\n               <Img alt=\"Task Manage logo\" src={logo} />\n               <Nav>\n                   {colData.length >= 1 && <P onClick={makeNewCard}>New Task</P>}\n                   <P onClick={editColumn}>Edit Columns</P>\n                   <P onClick={handleLogOut}>Log Out</P>\n               </Nav>\n            </Header>\n            <Main>\n                <CardHolder \n                    dbData={dbData} \n                    updateForm={updateForm} \n                    addNewForm={addNewForm} \n                    columns={colData} \n                    editData={editData} \n                    closeViewEdit={closeViewEdit} \n                    cardActive={cardActive} \n                    handleDelete={handleDelete} />\n            </Main>\n        </>\n    )\n}\n\nexport default TaskPage","import styled from \"styled-components\"\n\nexport const FormHolder = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 75%;\n    height: 80vh;\n    margin: 0 auto;\n\n    Form {\n        height: ${({$newUser}) => ($newUser ? 'auto' : '60%')};\n        width: 75%;\n        border: 3px solid #2C436D;\n        border-radius: 30px;\n        padding: 5vh 5vw;\n        margin-top: 2vh;\n    }\n\n    @media (max-width: 600px) {\n        Form {\n            width: 100%;\n        }\n\n        Button {\n            width: 75%;\n        }\n    }\n`\n\nexport const H4 = styled.h4`\n    font-size: 1.50rem;\n    text-align: center;\n`","import { useState } from 'react'\nimport { Header, Img, P, Nav } from \"../TaskPage/styles\"\nimport { Form, Input } from \"../NewCard/styles\"\nimport { Button } from \"../CardModal/styles\"\nimport { FormHolder, H4 } from \"./styles\"\nimport logo from \"../../public/img/TMlogo.png\"\nimport \"./styles.css\"\n\nconst Login = ({setUserAuth}) => {\n    // Handle user login information\n    const [login, setLogin] = useState({\n        username: '',\n        password: ''\n    }) \n    // Handle information in user login/new user\n    const [logError, setLogInfo] = useState('')\n    // Handle whether a new user is being created\n    const [newUser, setNewUser] = useState(false)\n    // Handle new user form\n    const [newUserForm, setNewUserForm] = useState({\n        sentFrom: false,\n        username: '',\n        passwordFirst: '',\n        passwordSecond: ''\n    })\n\n    const loginForm = (e) => {\n        const {name, value} = e.target\n        setLogin(login => ({\n            ...login,\n            [name]: value\n        }))\n    }\n\n    const submitLogin = async () => {\n        try {\n            const userAuth = await fetch('/apilog', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(login)\n            })\n            const confirm = await userAuth.json()\n            if(confirm.logged){\n                setUserAuth(confirm.id)\n            } else {\n                setLogInfo('There is an error with the username or password')\n            }\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    const createNewUserForm = (e) => {\n        const {name, value} = e.target\n        setNewUserForm(newUserForm => ({\n            ...newUserForm,\n            [name]: value\n        }))\n    }\n\n    const submitNewUser = async () => {\n        try {\n            const addNew = await fetch('/apiuser', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(newUserForm)\n            })\n            const response = await addNew.json()\n            if(response.userInSystem === false){\n                setNewUser(false)\n                setLogInfo(\"User created - Please login\")\n            } else {\n                setLogInfo(\"Username already in use\")\n            }\n        } catch (e) {\n            console.log(e)\n        } \n    }\n\n    const createUser = () => {\n        const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/g\n        setLogInfo(false)\n        for(let value in newUserForm){\n            if(newUserForm[value] === '') {\n                return setLogInfo('All fields must be completed')\n            } \n        }\n        if(newUserForm['passwordFirst'] !== newUserForm['passwordSecond']){\n            return setLogInfo('Passwords must match')\n        }\n        if(!passwordRegex.test(newUserForm['passwordFirst'])){\n            return setLogInfo('Password does not meet requirements')\n        }\n        newUserForm.sentFrom = true\n        submitNewUser()\n    }\n\n    return (\n        <>\n            <Header>\n                <Img alt=\"Task Manage logo\" src={logo} />\n                <Nav>\n                    <P onClick={() => {\n                        setNewUser(!newUser)\n                        setLogInfo(false)\n                    }\n                    }>{!newUser ? \"New User?\" : \"Cancel\"}</P>\n                </Nav>\n            </Header>\n                <FormHolder $newUser={newUser}>\n                    {!newUser ?\n                        <>\n                            <h1>Login</h1>\n                            <h3>Test account details:</h3> \n                            <h4>username: testuser</h4>\n                            <h4>password: test1234</h4>\n                            <Form>\n                                <H4>{logError ? logError : 'Enter your username and password'}</H4>\n                                <label htmlFor=\"username\">Username:</label>\n                                    <Input onChange={loginForm} type=\"text\" name=\"username\" id=\"username\" />\n                                <label htmlFor=\"password\">Password:</label>\n                                    <Input onChange={loginForm} type=\"password\" name=\"password\" id=\"password\" />\n                                <Button onClick={submitLogin} type=\"button\">Login</Button>\n                            </Form>\n                        </> :\n                        <>\n                            <h1>Create New User</h1>\n                            <Form>\n                                {logError && <H4>{logError}</H4>}\n                                <label htmlFor=\"username\">Enter a username:</label>\n                                    <Input onChange={createNewUserForm} type=\"text\" name=\"username\" id=\"username\" />\n                                <label htmlFor=\"passwordFirst\">Enter a password:</label>\n                                    <Input onChange={createNewUserForm} type=\"password\" name=\"passwordFirst\" id=\"passwordFirst\" />\n                                <label htmlFor=\"passwordSecond\">Re-enter password:</label>\n                                    <Input onChange={createNewUserForm} type=\"password\" name=\"passwordSecond\" id=\"passwordSecond\" />\n                                <ul>\n                                    <li>Passwords must be at least 8 characters</li>\n                                    <li>Passwords must contain at least 1 uppercase letter, 1 lowercase letter and 1 number</li>\n                                    <li>Passwords can contain special characters</li>\n                                </ul>\n                                <Button onClick={createUser} type=\"button\">Create user</Button>\n                            </Form>\n                        </>}\n                </FormHolder>\n        </>\n    )\n}\n\nexport default Login","import { useState } from 'react'\nimport { GlobalStyle } from './styles';\nimport TaskPage from './components/TaskPage';\nimport Login from './components/Login';\n\nfunction App() {\n  const [userAuth, setUserAuth] = useState(false)\n\n  return (\n    <>\n      <GlobalStyle />\n      {!userAuth ? <Login setUserAuth={setUserAuth} /> : <TaskPage setUserAuth={setUserAuth} />}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}