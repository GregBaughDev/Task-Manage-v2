{"version":3,"sources":["components/TaskPage/columns.js","styles.js","components/CardHolder/styles.js","components/TaskPage/styles.js","components/Column/styles.js","components/Card/styles.js","components/Card/index.jsx","components/Column/index.jsx","components/CardModal/styles.js","components/NewCard/styles.js","components/CardModal/index.jsx","components/CardHolder/index.jsx","components/NewCard/index.jsx","components/UpdateColumn/styles.js","components/UpdateColumn/index.jsx","public/img/TMlogo.png","components/TaskPage/index.jsx","components/Login/styles.js","components/Login/index.jsx","App.jsx","index.js"],"names":["module","exports","id","name","GlobalStyle","createGlobalStyle","Holder","styled","div","HolderHead","H3","h3","Cards","CardDisplay","$cardActive","Header","header","Img","img","Nav","nav","P","Main","main","NewCardDisplay","$modal","Column","section","Card","H4","h4","TaskCard","data","cardClick","_id","onClick","title","dateTime","user","Columns","dbData","colNum","map","seed","parseInt","column","CardModal","aside","H5","h5","H6","h6","ButtonHolder","Button","button","p","NewCardHolder","Form","form","Input","input","Textarea","textarea","Select","select","CardModalDisplay","closeViewEdit","currentData","columns","setEditCard","editCard","editData","handleDelete","cardActive","useState","editedForm","setEditedForm","valid","setValid","formUpdate","e","preventDefault","target","value","handleClose","validate","placeholder","formValid","key","htmlFor","type","onBlur","onChange","defaultValue","description","required","disabled","CardHolder","setCurrentData","event","sendData","targId","filter","NewCard","addNewForm","updateForm","makeNewCard","validObj","setValidObj","UpdateHolder","ColumnList","ColDiv","UpdateColumn","updateColumn","addNewColumn","addColumnUpdate","editColumn","handleColDelete","colEdit","setColEdit","addCol","setAddCol","editedCol","setEditedCol","handleClick","innerText","console","log","col","columnUpdate","TaskPage","setUserAuth","newCard","setNewCard","updateCol","setUpdateCol","modal","setModal","setDbData","colData","setColData","colForm","setColForm","setCardActive","formData","setFormData","fetchData","a","fetch","response","json","cards","useEffect","method","headers","body","JSON","stringify","handleLogOut","then","res","msg","length","tempArray","temp","indexOf","tempColArray","alt","src","logo","FormHolder","Login","username","password","login","setLogin","logError","setLogError","loginForm","submitLogin","userAuth","confirm","logged","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.623c0e76.chunk.js","sourcesContent":["module.exports = [\n    {\n        id: 1,\n        name: \"To Do\"\n    },\n    {\n        id: 2,\n        name: \"In Progress\"\n    },\n    {\n        id: 3,\n        name: \"QA\"\n    },\n    {\n        id: 4,\n        name: \"Complete\"\n    },\n]","import styled, {createGlobalStyle} from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    @font-face {\n        font-family: Hauora;\n        src: local(/src/fonts/Hauora-Bold);\n        font-weight: 800;\n    }\n\n    @font-face {\n        font-family: Hauora;\n        src: local(/src/fonts/Hauora-Medium);\n        font-weight: 600;\n    }\n\n    @font-face {\n        font-family: Hauora;\n        src: local(/src/fonts/Hauora-Regular);\n        font-weight: 400;\n    }\n\n    *,\n    *::after,\n    *::before {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: 'Hauora', sans-serif;\n        color: #2C436D;\n        font-weight: 400;\n        font-size: 1rem;\n    }\n`","import styled from 'styled-components'\n\nexport const Holder = styled.div`\n    width: 100%;\n    height: 100%;\n    border: 3px solid #2C436D;\n    border-radius: 15px;\n    margin: 5vh 5vw;\n    display: flex;\n    justify-content: space-around;\n    flex-direction: column;\n    /* Disable the below for version 1 */\n    /* overflow-x: scroll; */\n`\n\nexport const HolderHead = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 100%;\n    height: 5vh;\n    border-radius: 12px 12px 0 0;\n    background-color: #DAEDDE;\n`\n\nexport const H3 = styled.h3`\n    min-width: 23%;\n    /* Below for v2 */\n    /* min-width: 15vw; */\n    width: 25%;\n    text-align: center;\n`\n\nexport const Cards = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    padding: 2vh 0;\n`  \n\nexport const CardDisplay = styled.div`\n    display: ${({$cardActive}) => ($cardActive ? 'flex' : 'none')};\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(44,67,109,0.7);\n    overflow-y: hidden;\n`\n","import styled from 'styled-components'\nimport { CardDisplay } from '../CardHolder/styles'\n\nexport const Header = styled.header`\n    height: 10vh;\n    background-color: #FDDEA4;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 2vw;\n    left: 0;\n    right: 0;\n`\n\nexport const Img = styled.img`\n    width: 15vw;\n\n    @media (max-width: 700px) {\n        width: 20vw;\n    }\n`\n\nexport const Nav = styled.nav`\n    width: 40vw;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n\n    @media (max-width: 700px) {\n        width: 40vw;\n        font-size: 1rem;\n    }\n\n    @media (max-width: 500px) {\n        font-size: 0.75rem;\n    }\n`   \n\nexport const P = styled.nav`\n    padding: 1vh 1vw;\n    border-radius: 20px;\n    transition: background-color 0.5s;\n\n    &:hover {\n        background-color: #EBD3A7;\n        cursor: pointer;\n    }\n`\n\nexport const Main = styled.main`\n    width: 90vw;\n`\n\nexport const NewCardDisplay = styled(CardDisplay)`\n    display: ${({$modal}) => ($modal ? 'flex' : 'none')};\n`","import styled from \"styled-components\"\n\nexport const Column = styled.section`\n    min-width: 23%;\n    /* Below for v2 */\n    /* min-width: 15vw; */\n    height: auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`","import styled from \"styled-components\";\n\nexport const Card = styled.section`\n    padding: 2vh 5px;\n    flex-direction: column;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 15vh;\n    width: 20vw;\n    text-align: center;\n    border: 3px solid #2C436D;\n    background-color: #F8CCC5;\n    border-radius: 25px;\n    margin-bottom: 5%;\n\n    @media (max-width: 1020px) {\n        height: auto;\n    }\n`\n\nexport const H4 = styled.h4`\n    max-width: 100%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &:hover {\n        text-decoration: underline;\n        cursor: pointer;\n    }\n`","import { Card, H4 } from './styles'\nimport './css.css'\n\nconst TaskCard = ({data, cardClick}) => {\n    return (\n        <Card>\n            <H4 id={data._id} onClick={cardClick}>{data.title}</H4>\n            <h5>Date created: {data.dateTime}</h5>\n            <p>User: {data.user}</p>\n        </Card>\n    )\n}\n\nexport default TaskCard","import { Column } from './styles'\nimport TaskCard from '../Card/index'\n\nconst Columns = ({dbData, colNum, cardClick}) => {\n    return (\n        <Column>\n        {/* TO DO: MOVE HolderHead into this component */}\n            {dbData.map((seed) => (\n                parseInt(seed.column) === colNum ?\n                <TaskCard key={seed._id} data={seed} cardClick={cardClick} /> : null\n                ))}\n        </Column>\n    )\n}\n\nexport default Columns","import styled from 'styled-components'\n\nexport const CardModal = styled.aside`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    background-color: #F8CCC5;\n    border: 3px solid #2C436D;\n    border-radius: 30px;\n    text-align: center;\n    width: 60vw;\n    min-height: 60vh;\n    height: auto;\n    padding: 3vh 2vw;\n`   \n\nexport const H4 = styled.h4`\n    align-self: stretch;\n    font-size: 2.5rem;\n\n    &::after {\n        content: \"\";\n        background-color: #2C436D;\n        display: block;\n        position: relative;\n        height: 3px;\n    }\n`\n\nexport const H5 = styled.h5`\n    font-size: 2rem;\n\n    @media (max-width: 1020px){\n        display: ${({$cardActive}) => ($cardActive ? 'inline' : 'none')}\n    }\n`\n\nexport const H6 = styled.h6`\n    font-size: 1.5rem;\n`\n\nexport const ButtonHolder = styled.div`\n    display: flex;\n    width: 100%;\n    align-items: center;\n    justify-content: space-between;\n`\n\nexport const Button = styled.button`\n    position: relative;\n    pointer-events: all;\n    font-family: Hauora;\n    color: #2C436D;\n    width: 30%;\n    background-color: #DAEDDE;\n    border: none;\n    height: 5vh;\n    border-radius: 25px;\n    margin: 0 auto;\n    transition: background-color 0.5s;\n\n    &:hover {\n        background-color: #C5C9C6;\n        cursor: pointer;\n    }\n`\n\nexport const P = styled.p`\n    @media (max-width: 1020px){\n        display: ${({$cardActive}) => ($cardActive ? 'inline' : 'none')}\n    }\n`","import styled from \"styled-components\";\n\nexport const NewCardHolder = styled.section`\n    background-color: #F8CCC5;\n    border: 3px solid #2C436D;\n    border-radius: 30px;\n    text-align: center;\n    width: 60%;\n    height: 75%;\n    display: flex;\n    align-items: center;\n`\n\nexport const Form = styled.form`\n    margin: 0 auto;\n    align-items: center;\n    justify-content: space-between;\n    height: 90%;\n    display: flex;\n    flex-direction: column;\n    width: 90%;\n`\n\nexport const Input = styled.input`\n    border: 5px solid #FDDEA4;\n    border-radius: 20px;\n    width: 80%;\n    padding: 1vh 1vw;\n    font-family: Hauora;\n    margin: 1vh 0;\n`   \n\nexport const Textarea = styled.textarea`\n    border: 5px solid #FDDEA4;\n    border-radius: 20px 0 0 20px;\n    width: 90%;\n    padding: 1vh 1vw;\n    min-height: 100px;\n    height: 4vh;\n    resize: none;\n    font-family: Hauora;\n    margin: 1vh 0;\n`\n\nexport const Select = styled.select`\n    width: 50%;\n    padding: 1vh 1vw;\n    border: 5px solid #FDDEA4;\n    border-radius: 20px;\n    font-family: Hauora;\n    margin: 1vh 0;\n`","import { useState } from 'react'\nimport { CardModal, H4, H5, H6, P, Button, ButtonHolder} from './styles'\nimport { Form, Input, Textarea, Select } from '../NewCard/styles'\n\nconst CardModalDisplay = ({closeViewEdit, currentData, columns, setEditCard, editCard, editData, handleDelete, cardActive}) => {\n    // editedForm is the current form data prior to being edited\n    const [editedForm, setEditedForm] = useState(currentData[0])\n    // valid handles form validation\n    const [valid, setValid] = useState(true)\n\n    // The below handles the updating of the form\n    const formUpdate = (e) => {\n        e.preventDefault()\n        const {name, value} = e.target\n        setEditedForm(editedForm => ({\n            ...editedForm,\n            [name]: value\n        }))\n    }\n\n    /* The below handles closing the card - A check is undertaken to check if the card\n    is in the process of being edited */\n    const handleClose = () => {\n        if(editCard){\n            setEditCard(false)\n            closeViewEdit()\n        } else {\n            closeViewEdit()\n        }\n    }\n\n    // The below passes the edited form data to the editData function in the TaskPage component\n    const handleSubmit = () => {\n        setEditCard(false)\n        editData(editedForm)\n    }\n\n    // Form validation\n    const validate = (e) => {\n        if(e.target.value === ''){\n            e.target.placeholder = \"Field must be completed\"\n            setValid(false)\n        }\n        formValid()\n    }\n\n    const formValid = () => {\n        for(let key in editedForm){\n            if(editedForm[key] === ''){\n                return\n            }\n        }\n        setValid(true)\n    }\n \n    return ( \n        <CardModal>\n            {!editCard ?\n                <>\n                    <H4>{currentData[0].title}</H4>\n                    <H5 $cardActive={cardActive}>Date created: {currentData[0].dateTime}</H5>\n                    <H6>User: {currentData[0].user}</H6>\n                    <P $cardActive={cardActive}>{currentData[0].description}</P>\n                    <ButtonHolder>\n                        <Button type=\"button\" onClick={setEditCard}>Edit</Button>\n                        <Button type=\"button\" onClick={handleClose}>Close</Button>\n                    </ButtonHolder> \n                </> : \n                <Form>\n                    <label htmlFor=\"title\">Title:</label>\n                        <Input type=\"text\" name=\"title\" id=\"title\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].title} />\n                    <label htmlFor=\"dateTime\">Date:</label>\n                        <Input type=\"text\" name=\"dateTime\" id=\"dateTime\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].dateTime} />\n                    <label htmlFor=\"user\">User:</label>\n                        <Input type=\"text\" name=\"user\" id=\"user\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].user} />\n                    <label htmlFor=\"description\">Description:</label>\n                        <Textarea id=\"description\" name=\"description\" onBlur={validate} onChange={formUpdate} defaultValue={currentData[0].description}></Textarea>\n                    <label htmlFor=\"column-select\">Column:</label>\n                        <Select value={currentData[0].column} onChange={formUpdate} name=\"column\" id=\"column-select\" required>\n                                <option value=\"\" disabled>Select column</option>\n                            {columns.map((column) => (\n                                <option key={column.id} value={column.id}>{column.name}</option>\n                            ))}\n                        </Select>\n                    <ButtonHolder>\n                        <Button onClick={handleSubmit} type=\"button\" disabled={valid ? false : true}>{valid ? 'Submit' : 'Enter information'}</Button>\n                        <Button onClick={e => handleDelete(currentData[0]._id)} type=\"button\">Delete</Button>\n                        <Button onClick={handleClose} type=\"button\">Close</Button>\n                    </ButtonHolder>\n                </Form>\n            }\n        </CardModal>\n    )\n}\n\nexport default CardModalDisplay","import { useState } from 'react'\nimport { Holder, HolderHead, Cards, H3, CardDisplay } from './styles'\nimport Column from '../Column/index'\nimport CardModalDisplay from '../CardModal'\n\nconst CardHolder = ({columns, dbData, editData, closeViewEdit, cardActive, handleDelete}) => {\n    // currentData is the currently displayed data in the CardModalDisplay component\n    const [currentData, setCurrentData] = useState([])\n    // editCard is a conditional to check if the card is being edited\n    const [editCard, setEditCard] = useState(false)\n    \n    // Function to handle passing currently clicked card to modal\n    const cardClick = (event) => {\n        event.target.id && sendData(event.target.id)\n        closeViewEdit()\n    }\n\n    // The below takes an ID as an argument and returns the data to display in the CardModalDisplay component\n    const sendData = (targId) => {\n        setCurrentData(currentData => (\n            currentData = dbData.filter(data => data._id === targId)\n        ))\n    }\n\n    return(\n        <Holder>\n            <CardDisplay $cardActive={cardActive} >\n                {cardActive && <CardModalDisplay \n                                    closeViewEdit={closeViewEdit} \n                                    currentData={currentData} \n                                    columns={columns} \n                                    setEditCard={setEditCard} \n                                    editCard={editCard} \n                                    editData={editData} \n                                    handleDelete={handleDelete}\n                                    cardActive={cardActive} /> }\n            </CardDisplay>\n            {/* TO DO V2 - Move below into cards section for styling */}\n            <HolderHead>\n                {columns.map((column) => (\n                        <H3 key={column.id}>{column.name}</H3>\n                    ))}\n            </HolderHead>\n            <Cards>\n                {columns.map((column) => (\n                    <Column key={column.id} colNum={column.id} dbData={dbData} cardClick={cardClick} />\n                ))}\n            </Cards>\n        </Holder>\n    )\n}\n\nexport default CardHolder","import { useState } from 'react'\nimport { NewCardHolder, Form, Input, Textarea, Select } from './styles'\nimport { Button, ButtonHolder } from '../CardModal/styles'\n\nconst NewCard = ({columns, addNewForm, updateForm, makeNewCard}) => {\n    const [valid, setValid] = useState(false)\n    const [validObj, setValidObj] = useState({\n        title: '',\n        dateTime: '',\n        user: '',\n    })\n\n    const validate = (e) => {\n        const {name, value} = e.target\n        if(e.target.value === ''){\n            e.target.placeholder = \"Field must be completed\"\n        } else {\n            setValidObj(() => ({\n                ...validObj,\n                [name]: value\n            }))\n        }\n        formValid()\n    }\n\n    const formValid = () => {\n        for(let key in validObj){\n            if(validObj[key] === ''){\n                return\n            }\n        }\n        setValid(true)\n    }\n\n    return (\n        <NewCardHolder>\n            <Form>\n                <label htmlFor=\"title\">Title:</label>\n                    <Input onChange={updateForm} onBlur={validate} type=\"text\" name=\"title\" id=\"title\" />\n                {/* TODO: VERSION 2 add date validations \n                <label htmlFor=\"date\">Start Date\n                    <Input type=\"date\" name=\"date\" id=\"date\" />\n                </label>\n                <label htmlFor=\"date\">Finish Date\n                    <Input type=\"date\" name=\"date\" id=\"date\"  />\n                </label> */}\n                <label htmlFor=\"dateTime\">Date:</label>\n                    <Input onChange={updateForm} onBlur={validate} type=\"text\" name=\"dateTime\" id=\"dateTime\" />\n                <label htmlFor=\"user\">User:</label>\n                    <Input onChange={updateForm} onBlur={validate} type=\"text\" name=\"user\" id=\"user\" />\n                <label htmlFor=\"description\">Description:</label>\n                    <Textarea onChange={updateForm} onBlur={validate} id=\"description\" name=\"description\"></Textarea>\n                <label htmlFor=\"column-select\">Column:</label>\n                    <Select onChange={updateForm} name=\"column\" id=\"column-select\" >\n                            <option disabled>Select column</option>\n                        {columns.map((column) => (\n                            <option key={column.id} value={column.id}>{column.name}</option>\n                        ))}\n                    </Select>\n                <ButtonHolder>\n                    <Button onClick={addNewForm} type=\"button\" disabled={valid ? false : true}>{valid ? 'Submit' : 'Enter information'}</Button>\n                    <Button type=\"button\" onClick={makeNewCard}>Close</Button>\n                </ButtonHolder>\n            </Form>\n        </NewCardHolder>\n    )\n}\n\nexport default NewCard","import styled from \"styled-components\"\n\nexport const UpdateHolder = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    height: 75%;\n    width: 75%;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const P = styled.p`\n    font-size: 1.25rem;\n`  \n\nexport const ColumnList = styled.div`\n    height: 50%;\n    overflow-y: scroll;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 75%;\n    border: 3px solid #2C436D;\n    border-radius: 20px 0 0 20px;\n    padding: 1vh 1vw;\n    align-items: center;\n    background: white;\n`\n\nexport const ColDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n`","import React, { useState } from 'react'\nimport { NewCardHolder, Input } from '../NewCard/styles'\nimport { Button, ButtonHolder } from '../CardModal/styles'\nimport { UpdateHolder, P, ColumnList, ColDiv } from './styles'\n\nconst UpdateColumn = ({columns, updateColumn, addNewColumn, addColumnUpdate, editColumn, handleColDelete}) => {\n    // Editing column names state\n    const [colEdit, setColEdit] = useState(false)\n    // Adding a new column state\n    const [addCol, setAddCol] = useState(false)\n    // Currently edited column\n    const [editedCol, setEditedCol] = useState(null)\n\n    // The below handles updating the column name\n    // TO DO: Functionality so only one column can be updated at a time\n    const columnUpdate = (e, col) => {\n        e.preventDefault()\n        const {name, value} = e.target\n        setEditedCol(editedCol => ({\n            id: col,\n            [name]: value,\n        }))\n    }\n\n    // TO DO: Delete column functionality\n    // The below handles the click function depending on the button\n    const handleClick = (e) => {\n        if(e.target.innerText === \"Add Column\"){\n            setAddCol(!addCol)\n        }\n        \n        if(e.target.innerText === \"Edit\"){\n            if(addCol){\n                setAddCol(!addCol)\n            }\n            setColEdit(!colEdit)\n        }\n        \n        if(e.target.innerText === \"Close\"){\n            editColumn()\n        }\n\n        if(e.target.innerText === \"Delete\"){\n            // Delete functionality\n            console.log('e')\n        }\n    }\n\n    const handleEdit = () => {\n        if(editedCol !== null){\n            addColumnUpdate(editedCol)\n            editColumn()\n        }\n    }\n\n    return (\n        <NewCardHolder>\n            <UpdateHolder>\n                <h3>Columns</h3>\n                <ColumnList>\n                    {addCol && <Input type=\"text\" onChange={updateColumn} name=\"name\" placeholder=\"Enter new column name\" />}\n                    {columns.map((col) => (\n                        colEdit ? \n                            <ColDiv key={col.id}>\n                                <Input type=\"text\" onChange={e => columnUpdate(e, col.id)} defaultValue={col.name} name=\"name\" />\n                                <Button onClick={e => handleColDelete(col.id)}>Delete</Button>\n                            </ColDiv> :\n                            <P key={col.id}>{col.name}</P>\n                        ))}\n                </ColumnList>\n                <ButtonHolder>\n                    {colEdit ? \n                        <Button onClick={handleEdit}>Save</Button> :\n                        <>\n                            <Button onClick={handleClick}>Edit</Button>\n                            {!addCol ? \n                                <Button type=\"submit\" onClick={handleClick}>Add Column</Button> : \n                                <Button type=\"submit\" onClick={addNewColumn}>Save Column</Button>}\n                        </>\n                    }\n                    <Button onClick={handleClick}>Close</Button>\n                </ButtonHolder>\n            </UpdateHolder>\n        </NewCardHolder>\n    )\n}\n\nexport default UpdateColumn","export default __webpack_public_path__ + \"static/media/TMlogo.403cf7c1.png\";","import { useState, useEffect } from 'react'\nimport { Header, Img, Nav, Main, NewCardDisplay, P } from './styles'\nimport CardHolder from '../CardHolder/index.jsx'\nimport NewCard from '../NewCard/index'\nimport UpdateColumn from '../UpdateColumn'\nimport logo from '../../public/img/TMlogo.png'\nimport columns from './columns'\n\nconst TaskPage = ({setUserAuth}) => {\n    // State for new card in progress\n    const [newCard, setNewCard] = useState(false)\n    // State for column update in progress\n    const [updateCol, setUpdateCol] = useState(false)\n    // State for bg modal\n    const [modal, setModal] = useState(false)\n    // Seed data passed into state\n    const [dbData, setDbData] = useState([]) \n    // Column data passed into state\n    const [colData, setColData] = useState(columns)\n    // State for handling adding a new column\n    const [colForm, setColForm] = useState({\n        id: 5,\n        name: '',\n    })\n    // State for handling viewing of a card\n    const [cardActive, setCardActive] = useState(false)\n    // State for handling adding a new card\n    const [formData, setFormData] = useState({\n        title: '', \n        dateTime: '',\n        user: '',\n        description: '',\n        column: 1,\n    }) \n \n    // Function to handle the new card data\n    const updateForm = (e) => {\n        const {name, value} = e.target\n        setFormData(formData => ({\n            ...formData,\n            [name]: value\n        }))\n    }\n\n    // SERVER START\n    const fetchData = async () => {\n        try {\n            const response = await fetch('/api')\n            const cards = await response.json()\n            setDbData(cards)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    // Function to handle adding the new card to the db\n    const addNewForm = async (e) => {\n        e.preventDefault()\n        try {\n            await fetch('/api', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(formData)\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        fetchData()\n        makeNewCard()\n    }\n\n    // Function to handle deleting a card\n    const handleDelete = async (id) => {\n        try {\n            await fetch(`/api/${id}`, {\n                method: 'DELETE',\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        fetchData()\n        closeViewEdit()\n    }\n\n    // Function to handle editing a card\n    const editData = async (data) => {\n        try {\n            await fetch(`/api/${data._id}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            })\n        } catch(err) {\n            console.log(err)\n        }\n        fetchData()\n        closeViewEdit()\n    }\n    // SERVER END\n\n    // Function to change the view if a card is not being added\n    const makeNewCard = () => {\n        setModal(!modal)\n        setNewCard(!newCard)\n    }\n\n    // Function to handle new column click\n    const editColumn = () => {\n        setModal(!modal)\n        setUpdateCol(!updateCol)\n    }\n    \n    // Function to handle the new column data\n    const updateColumn = (e) => {\n        const {name, value} = e.target\n        setColForm(colForm => ({\n            ...colForm,\n            [name]: value\n        }))\n    }\n\n    // Function to handle adding the new column to the column data\n    const addNewColumn = (e) => {\n        e.preventDefault()\n        // TO DO: Look into below as ID is adding two 5's and sort styles for new column\n        setColForm(colForm => ({\n            ...colForm,\n            id: colData.length + 1,\n        }))\n        setColData(colData => (\n            colData = [...colData, colForm]\n        ))\n        editColumn()\n    }\n\n    // Function to handle editing a column and replacing in the array\n    const addColumnUpdate = (data) => {\n        const tempArray = [...colData]\n        for(let temp of tempArray){\n            if(temp.id === data.id){\n                tempArray[tempArray.indexOf(temp)] = data\n            }\n        }\n        setColData(colData => (\n            colData = tempArray\n        ))\n    }\n\n    // Function to handle deleting a column\n    const handleColDelete = (id) => {\n        // Delete the column\n        let tempColArray = [...colData]\n        setColData(colData => (\n            colData = tempColArray.filter(data => data.id !== id)\n        ))\n        // Delete the cards in the column\n        // TO DO: Cards not deleted from column - update when connected to backend\n        editColumn()\n    }\n\n    // If 'cancel' is selected, change the view. TODO: Just use one main function to handle all modal views?\n    const closeViewEdit = () => {\n        setCardActive(!cardActive)\n    }\n\n    const handleLogOut = async () => {\n        try {\n            await fetch('/apilog', {\n                method: 'DELETE',\n            })\n            .then(res => res.json())\n            .then(msg => console.log(msg))\n        } catch(err) {\n            console.log(err)\n        }\n        setUserAuth(false)\n    }\n\n    return (\n        <>\n            <Header>\n                <NewCardDisplay $modal={modal}>\n                    {newCard && \n                        <NewCard \n                            columns={colData} \n                            addNewForm={addNewForm} \n                            updateForm={updateForm} \n                            makeNewCard={makeNewCard} />}\n                    {updateCol && \n                        <UpdateColumn \n                            updateColumn={updateColumn} \n                            addNewColumn={addNewColumn} \n                            columns={colData} \n                            addColumnUpdate={addColumnUpdate} \n                            editColumn={editColumn} \n                            handleColDelete={handleColDelete} />}\n                </NewCardDisplay>\n               <Img alt=\"Task Manage logo\" src={logo} />\n               <Nav>\n                   <P onClick={makeNewCard}>New Task</P>\n                   {/* TODO: Edit column functionality for v2 */}\n                   {/* <P onClick={editColumn}>Edit Columns</P> */}\n                   <P onClick={handleLogOut}>Log Out</P>\n               </Nav>\n            </Header>\n            <Main>\n                {dbData === [] ? <h2>Loading</h2> : \n                    <CardHolder \n                        dbData={dbData} \n                        updateForm={updateForm} \n                        addNewForm={addNewForm} \n                        columns={colData} \n                        editData={editData} \n                        closeViewEdit={closeViewEdit} \n                        cardActive={cardActive} \n                        handleDelete={handleDelete} />\n                }\n            </Main>\n        </>\n    )\n}\n\nexport default TaskPage","import styled from \"styled-components\"\n\nexport const FormHolder = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 75%;\n    height: 80vh;\n    margin: 0 auto;\n\n    Form {\n        height: 50%;\n        width: 75%;\n        border: 3px solid #2C436D;\n        border-radius: 30px;\n        padding: 5vh 5vw;\n        margin-top: 2vh;\n    }\n`","import { useState } from 'react'\nimport { Header, Img } from \"../TaskPage/styles\"\nimport { Form, Input } from \"../NewCard/styles\"\nimport { Button } from \"../CardModal/styles\"\nimport { FormHolder } from \"./styles\"\nimport logo from \"../../public/img/TMlogo.png\"\n\nconst Login = ({setUserAuth}) => {\n    const [login, setLogin] = useState({\n        username: '',\n        password: ''\n    }) \n\n    const [logError, setLogError] = useState('')\n\n    const loginForm = (e) => {\n        const {name, value} = e.target\n        setLogin(login => ({\n            ...login,\n            [name]: value\n        }))\n    }\n\n    const submitLogin = async () => {\n        try {\n            const userAuth = await fetch('/apilog', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(login)\n            })\n            const confirm = await userAuth.json()\n            if(confirm.logged){\n                setUserAuth(confirm.id)\n            } else {\n                setLogError('There is an error with the username or password')\n            }\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <>\n            <Header>\n                <Img alt=\"Task Manage logo\" src={logo} />\n            </Header>\n            <FormHolder>\n                <h1>Login</h1>\n                <h3>Test account details are available <a href=\"https://github.com/GregBaughDev/Task-Manage-v2\">here</a></h3>\n                <p>{logError ? logError : 'Enter your username and password'}</p>\n                <Form>\n                    <label htmlFor=\"username\">Username:</label>\n                        <Input onChange={loginForm} type=\"text\" name=\"username\" id=\"username\" />\n                    <label htmlFor=\"password\">Password:</label>\n                        <Input onChange={loginForm} type=\"password\" name=\"password\" id=\"password\" />\n                    <Button onClick={submitLogin} type=\"button\">Login</Button>\n                </Form>\n            </FormHolder>\n        </>\n    )\n}\n\nexport default Login","import { useState } from 'react'\nimport { GlobalStyle } from './styles';\nimport TaskPage from './components/TaskPage';\nimport Login from './components/Login';\n\nfunction App() {\n  const [userAuth, setUserAuth] = useState(false)\n  \n  return (\n    <>\n      <GlobalStyle />\n      {!userAuth ? <Login setUserAuth={setUserAuth} /> : <TaskPage setUserAuth={setUserAuth} />}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}